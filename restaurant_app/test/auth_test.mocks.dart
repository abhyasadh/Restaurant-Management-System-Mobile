// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_app/test/auth_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;

import 'package:dartz/dartz.dart' as _i5;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter/src/widgets/notification_listener.dart' as _i19;
import 'package:flutter/widgets.dart' as _i9;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_app/core/failure/failure.dart' as _i14;
import 'package:restaurant_app/core/shared_pref/user_shared_prefs.dart' as _i3;
import 'package:restaurant_app/features/auth/login/domain/repository/login_repository.dart'
    as _i2;
import 'package:restaurant_app/features/auth/login/domain/usecase/login_usecase.dart'
    as _i12;
import 'package:restaurant_app/features/auth/otp/domain/repository/otp_repository.dart'
    as _i7;
import 'package:restaurant_app/features/auth/otp/domain/usecases/otp_usecases.dart'
    as _i17;
import 'package:restaurant_app/features/auth/register/domain/entity/register_entity.dart'
    as _i16;
import 'package:restaurant_app/features/auth/register/domain/repository/register_repository.dart'
    as _i6;
import 'package:restaurant_app/features/auth/register/domain/usecases/register_usecase.dart'
    as _i15;
import 'package:restaurant_app/features/auth/reset_password/domain/repository/reset_repository.dart'
    as _i8;
import 'package:restaurant_app/features/auth/reset_password/domain/usecases/reset_usecase.dart'
    as _i18;
import 'package:restaurant_app/features/home/home_state.dart' as _i11;
import 'package:restaurant_app/features/home/home_view_model.dart' as _i4;
import 'package:state_notifier/state_notifier.dart' as _i21;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeILoginRepository_0 extends _i1.SmartFake
    implements _i2.ILoginRepository {
  _FakeILoginRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserSharedPrefs_1 extends _i1.SmartFake
    implements _i3.UserSharedPrefs {
  _FakeUserSharedPrefs_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeViewModel_2 extends _i1.SmartFake implements _i4.HomeViewModel {
  _FakeHomeViewModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIRegisterRepository_4 extends _i1.SmartFake
    implements _i6.IRegisterRepository {
  _FakeIRegisterRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOTPRepository_5 extends _i1.SmartFake
    implements _i7.IOTPRepository {
  _FakeIOTPRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIResetRepository_6 extends _i1.SmartFake
    implements _i8.IResetRepository {
  _FakeIResetRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_7 extends _i1.SmartFake implements _i9.Widget {
  _FakeWidget_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_8 extends _i1.SmartFake
    implements _i9.InheritedWidget {
  _FakeInheritedWidget_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_9 extends _i1.SmartFake
    implements _i10.DiagnosticsNode {
  _FakeDiagnosticsNode_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeHomeState_10 extends _i1.SmartFake implements _i11.HomeState {
  _FakeHomeState_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i12.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ILoginRepository get loginRepository => (super.noSuchMethod(
        Invocation.getter(#loginRepository),
        returnValue: _FakeILoginRepository_0(
          this,
          Invocation.getter(#loginRepository),
        ),
      ) as _i2.ILoginRepository);

  @override
  _i3.UserSharedPrefs get userSharedPrefs => (super.noSuchMethod(
        Invocation.getter(#userSharedPrefs),
        returnValue: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
      ) as _i3.UserSharedPrefs);

  @override
  _i4.HomeViewModel get homeViewModel => (super.noSuchMethod(
        Invocation.getter(#homeViewModel),
        returnValue: _FakeHomeViewModel_2(
          this,
          Invocation.getter(#homeViewModel),
        ),
      ) as _i4.HomeViewModel);

  @override
  _i13.Future<_i5.Either<_i14.Failure, bool>> login(
    String? phone,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            phone,
            password,
          ],
        ),
        returnValue: _i13.Future<_i5.Either<_i14.Failure, bool>>.value(
            _FakeEither_3<_i14.Failure, bool>(
          this,
          Invocation.method(
            #login,
            [
              phone,
              password,
            ],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, bool>>);
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i15.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.IRegisterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIRegisterRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.IRegisterRepository);

  @override
  _i13.Future<_i5.Either<_i14.Failure, bool>> register(
          _i16.RegisterEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [user],
        ),
        returnValue: _i13.Future<_i5.Either<_i14.Failure, bool>>.value(
            _FakeEither_3<_i14.Failure, bool>(
          this,
          Invocation.method(
            #register,
            [user],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, bool>>);

  @override
  _i13.Future<_i5.Either<_i14.Failure, bool>> sendOTP(String? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOTP,
          [number],
        ),
        returnValue: _i13.Future<_i5.Either<_i14.Failure, bool>>.value(
            _FakeEither_3<_i14.Failure, bool>(
          this,
          Invocation.method(
            #sendOTP,
            [number],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, bool>>);
}

/// A class which mocks [OTPUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOTPUseCase extends _i1.Mock implements _i17.OTPUseCase {
  MockOTPUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.IOTPRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIOTPRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.IOTPRepository);

  @override
  _i13.Future<_i5.Either<_i14.Failure, bool>> verifyOTP(String? otp) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOTP,
          [otp],
        ),
        returnValue: _i13.Future<_i5.Either<_i14.Failure, bool>>.value(
            _FakeEither_3<_i14.Failure, bool>(
          this,
          Invocation.method(
            #verifyOTP,
            [otp],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, bool>>);
}

/// A class which mocks [ResetUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetUseCase extends _i1.Mock implements _i18.ResetUseCase {
  MockResetUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.IResetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIResetRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.IResetRepository);

  @override
  _i13.Future<_i5.Either<_i14.Failure, bool>> sendOTP(String? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOTP,
          [number],
        ),
        returnValue: _i13.Future<_i5.Either<_i14.Failure, bool>>.value(
            _FakeEither_3<_i14.Failure, bool>(
          this,
          Invocation.method(
            #sendOTP,
            [number],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, bool>>);

  @override
  _i13.Future<_i5.Either<_i14.Failure, bool>> resetPassword(
    String? phone,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [
            phone,
            password,
          ],
        ),
        returnValue: _i13.Future<_i5.Either<_i14.Failure, bool>>.value(
            _FakeEither_3<_i14.Failure, bool>(
          this,
          Invocation.method(
            #resetPassword,
            [
              phone,
              password,
            ],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, bool>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i9.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_7(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i9.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i9.InheritedWidget dependOnInheritedElement(
    _i9.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_8(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i9.InheritedWidget);

  @override
  void visitAncestorElements(_i9.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i9.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i19.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.DiagnosticsNode describeElement(
    String? name, {
    _i10.DiagnosticsTreeStyle? style = _i10.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i10.DiagnosticsNode);

  @override
  _i10.DiagnosticsNode describeWidget(
    String? name, {
    _i10.DiagnosticsTreeStyle? style = _i10.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i10.DiagnosticsNode);

  @override
  List<_i10.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i10.DiagnosticsNode>[],
      ) as List<_i10.DiagnosticsNode>);

  @override
  _i10.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i10.DiagnosticsNode);
}

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i4.HomeViewModel {
  MockHomeViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.UserSharedPrefs get userSharedPrefs => (super.noSuchMethod(
        Invocation.getter(#userSharedPrefs),
        returnValue: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
      ) as _i3.UserSharedPrefs);

  @override
  set onError(_i20.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i13.Stream<_i11.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i11.HomeState>.empty(),
      ) as _i13.Stream<_i11.HomeState>);

  @override
  _i11.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_10(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.HomeState);

  @override
  set state(_i11.HomeState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.HomeState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeHomeState_10(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i11.HomeState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void updateTable(String? table) => super.noSuchMethod(
        Invocation.method(
          #updateTable,
          [table],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeIndex(int? index) => super.noSuchMethod(
        Invocation.method(
          #changeIndex,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUserData(List<String?>? data) => super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i11.HomeState? old,
    _i11.HomeState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i20.RemoveListener addListener(
    _i21.Listener<_i11.HomeState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i20.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
