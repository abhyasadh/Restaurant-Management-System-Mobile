// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_app/test/menu_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/widgets.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_app/core/failure/failure.dart' as _i10;
import 'package:restaurant_app/features/favourites/domain/repository/favourites_repository.dart'
    as _i6;
import 'package:restaurant_app/features/favourites/domain/usecases/favourites_usecase.dart'
    as _i15;
import 'package:restaurant_app/features/home/home_state.dart' as _i7;
import 'package:restaurant_app/features/menu/domain/entity/category_entity.dart'
    as _i11;
import 'package:restaurant_app/features/menu/domain/entity/food_entity.dart'
    as _i12;
import 'package:restaurant_app/features/menu/domain/repository/menu_repository.dart'
    as _i2;
import 'package:restaurant_app/features/menu/domain/usecases/menu_usecase.dart'
    as _i8;
import 'package:restaurant_app/features/orders/domain/entity/order_entity.dart'
    as _i14;
import 'package:restaurant_app/features/orders/domain/repository/order_local_repository.dart'
    as _i4;
import 'package:restaurant_app/features/orders/domain/repository/order_remote_repository.dart'
    as _i5;
import 'package:restaurant_app/features/orders/domain/usecases/order_usecase.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIMenuRepository_0 extends _i1.SmartFake
    implements _i2.IMenuRepository {
  _FakeIMenuRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeILocalOrderRepository_2 extends _i1.SmartFake
    implements _i4.ILocalOrderRepository {
  _FakeILocalOrderRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIRemoteOrderRepository_3 extends _i1.SmartFake
    implements _i5.IRemoteOrderRepository {
  _FakeIRemoteOrderRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIFavouritesRepository_4 extends _i1.SmartFake
    implements _i6.IFavouritesRepository {
  _FakeIFavouritesRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_5 extends _i1.SmartFake implements _i7.HomeState {
  _FakeHomeState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MenuUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuUseCase extends _i1.Mock implements _i8.MenuUseCase {
  MockMenuUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IMenuRepository get menuRepository => (super.noSuchMethod(
        Invocation.getter(#menuRepository),
        returnValue: _FakeIMenuRepository_0(
          this,
          Invocation.getter(#menuRepository),
        ),
      ) as _i2.IMenuRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i11.CategoryEntity>>>
      getAllCategories() => (super.noSuchMethod(
            Invocation.method(
              #getAllCategories,
              [],
            ),
            returnValue: _i9.Future<
                    _i3.Either<_i10.Failure, List<_i11.CategoryEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i11.CategoryEntity>>(
              this,
              Invocation.method(
                #getAllCategories,
                [],
              ),
            )),
          ) as _i9.Future<_i3.Either<_i10.Failure, List<_i11.CategoryEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>> getSelectedFood(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSelectedFood,
          [categoryId],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i12.FoodEntity>>(
          this,
          Invocation.method(
            #getSelectedFood,
            [categoryId],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>> getSearchedFood(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSearchedFood,
          [query],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i12.FoodEntity>>(
          this,
          Invocation.method(
            #getSearchedFood,
            [query],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>>);
}

/// A class which mocks [OrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderUseCase extends _i1.Mock implements _i13.OrderUseCase {
  MockOrderUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ILocalOrderRepository get localOrderRepository => (super.noSuchMethod(
        Invocation.getter(#localOrderRepository),
        returnValue: _FakeILocalOrderRepository_2(
          this,
          Invocation.getter(#localOrderRepository),
        ),
      ) as _i4.ILocalOrderRepository);

  @override
  _i5.IRemoteOrderRepository get remoteOrderRepository => (super.noSuchMethod(
        Invocation.getter(#remoteOrderRepository),
        returnValue: _FakeIRemoteOrderRepository_3(
          this,
          Invocation.getter(#remoteOrderRepository),
        ),
      ) as _i5.IRemoteOrderRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, String>> addOrderLocally(
          _i14.OrderEntity? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrderLocally,
          [order],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, String>>.value(
            _FakeEither_1<_i10.Failure, String>(
          this,
          Invocation.method(
            #addOrderLocally,
            [order],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, String>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>
      getAllLocalOrders() => (super.noSuchMethod(
            Invocation.method(
              #getAllLocalOrders,
              [],
            ),
            returnValue: _i9
                .Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i14.OrderEntity>>(
              this,
              Invocation.method(
                #getAllLocalOrders,
                [],
              ),
            )),
          ) as _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, bool>> removeOrder(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeOrder,
          [key],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, bool>>.value(
            _FakeEither_1<_i10.Failure, bool>(
          this,
          Invocation.method(
            #removeOrder,
            [key],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, bool>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>
      clearLocalOrders() => (super.noSuchMethod(
            Invocation.method(
              #clearLocalOrders,
              [],
            ),
            returnValue: _i9
                .Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i14.OrderEntity>>(
              this,
              Invocation.method(
                #clearLocalOrders,
                [],
              ),
            )),
          ) as _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, _i14.OrderEntity>> getLocalOrder(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalOrder,
          [key],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i10.Failure, _i14.OrderEntity>>.value(
                _FakeEither_1<_i10.Failure, _i14.OrderEntity>(
          this,
          Invocation.method(
            #getLocalOrder,
            [key],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, _i14.OrderEntity>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>
      getAllRemoteOrders() => (super.noSuchMethod(
            Invocation.method(
              #getAllRemoteOrders,
              [],
            ),
            returnValue: _i9
                .Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i14.OrderEntity>>(
              this,
              Invocation.method(
                #getAllRemoteOrders,
                [],
              ),
            )),
          ) as _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>
      clearRemoteOrders() => (super.noSuchMethod(
            Invocation.method(
              #clearRemoteOrders,
              [],
            ),
            returnValue: _i9
                .Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i14.OrderEntity>>(
              this,
              Invocation.method(
                #clearRemoteOrders,
                [],
              ),
            )),
          ) as _i9.Future<_i3.Either<_i10.Failure, List<_i14.OrderEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, bool>> addOrder(
          List<_i14.OrderEntity>? orders) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrder,
          [orders],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, bool>>.value(
            _FakeEither_1<_i10.Failure, bool>(
          this,
          Invocation.method(
            #addOrder,
            [orders],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, bool>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, bool>> checkout(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkout,
          [status],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, bool>>.value(
            _FakeEither_1<_i10.Failure, bool>(
          this,
          Invocation.method(
            #checkout,
            [status],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, bool>>);
}

/// A class which mocks [FavouritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouritesUseCase extends _i1.Mock implements _i15.FavouritesUseCase {
  MockFavouritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.IFavouritesRepository get favouritesRepository => (super.noSuchMethod(
        Invocation.getter(#favouritesRepository),
        returnValue: _FakeIFavouritesRepository_4(
          this,
          Invocation.getter(#favouritesRepository),
        ),
      ) as _i6.IFavouritesRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>> getFavourites() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavourites,
          [],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>>.value(
                _FakeEither_1<_i10.Failure, List<_i12.FoodEntity>>(
          this,
          Invocation.method(
            #getFavourites,
            [],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, List<_i12.FoodEntity>>>);

  @override
  _i9.Future<_i3.Either<_i10.Failure, bool>> editFavourites({
    required bool? add,
    required String? foodId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editFavourites,
          [],
          {
            #add: add,
            #foodId: foodId,
          },
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, bool>>.value(
            _FakeEither_1<_i10.Failure, bool>(
          this,
          Invocation.method(
            #editFavourites,
            [],
            {
              #add: add,
              #foodId: foodId,
            },
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, bool>>);
}

/// A class which mocks [HomeState].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeState extends _i1.Mock implements _i7.HomeState {
  MockHomeState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get index => (super.noSuchMethod(
        Invocation.getter(#index),
        returnValue: 0,
      ) as int);

  @override
  List<_i16.Widget> get listWidgets => (super.noSuchMethod(
        Invocation.getter(#listWidgets),
        returnValue: <_i16.Widget>[],
      ) as List<_i16.Widget>);

  @override
  List<String?> get userData => (super.noSuchMethod(
        Invocation.getter(#userData),
        returnValue: <String?>[],
      ) as List<String?>);

  @override
  _i7.HomeState copyWith({
    int? index,
    String? tableNumber,
    List<String?>? userData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #index: index,
            #tableNumber: tableNumber,
            #userData: userData,
          },
        ),
        returnValue: _FakeHomeState_5(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #index: index,
              #tableNumber: tableNumber,
              #userData: userData,
            },
          ),
        ),
      ) as _i7.HomeState);
}
