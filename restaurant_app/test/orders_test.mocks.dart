// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_app/test/orders_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_app/core/failure/failure.dart' as _i7;
import 'package:restaurant_app/features/orders/domain/entity/order_entity.dart'
    as _i8;
import 'package:restaurant_app/features/orders/domain/repository/order_local_repository.dart'
    as _i2;
import 'package:restaurant_app/features/orders/domain/repository/order_remote_repository.dart'
    as _i3;
import 'package:restaurant_app/features/orders/domain/usecases/order_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeILocalOrderRepository_0 extends _i1.SmartFake
    implements _i2.ILocalOrderRepository {
  _FakeILocalOrderRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIRemoteOrderRepository_1 extends _i1.SmartFake
    implements _i3.IRemoteOrderRepository {
  _FakeIRemoteOrderRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderUseCase extends _i1.Mock implements _i5.OrderUseCase {
  MockOrderUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ILocalOrderRepository get localOrderRepository => (super.noSuchMethod(
        Invocation.getter(#localOrderRepository),
        returnValue: _FakeILocalOrderRepository_0(
          this,
          Invocation.getter(#localOrderRepository),
        ),
      ) as _i2.ILocalOrderRepository);

  @override
  _i3.IRemoteOrderRepository get remoteOrderRepository => (super.noSuchMethod(
        Invocation.getter(#remoteOrderRepository),
        returnValue: _FakeIRemoteOrderRepository_1(
          this,
          Invocation.getter(#remoteOrderRepository),
        ),
      ) as _i3.IRemoteOrderRepository);

  @override
  _i6.Future<_i4.Either<_i7.Failure, String>> addOrderLocally(
          _i8.OrderEntity? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrderLocally,
          [order],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, String>>.value(
            _FakeEither_2<_i7.Failure, String>(
          this,
          Invocation.method(
            #addOrderLocally,
            [order],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, String>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>
      getAllLocalOrders() => (super.noSuchMethod(
            Invocation.method(
              #getAllLocalOrders,
              [],
            ),
            returnValue: _i6
                .Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.OrderEntity>>(
              this,
              Invocation.method(
                #getAllLocalOrders,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> removeOrder(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeOrder,
          [key],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #removeOrder,
            [key],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>
      clearLocalOrders() => (super.noSuchMethod(
            Invocation.method(
              #clearLocalOrders,
              [],
            ),
            returnValue: _i6
                .Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.OrderEntity>>(
              this,
              Invocation.method(
                #clearLocalOrders,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, _i8.OrderEntity>> getLocalOrder(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalOrder,
          [key],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i8.OrderEntity>>.value(
            _FakeEither_2<_i7.Failure, _i8.OrderEntity>(
          this,
          Invocation.method(
            #getLocalOrder,
            [key],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i8.OrderEntity>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>
      getAllRemoteOrders() => (super.noSuchMethod(
            Invocation.method(
              #getAllRemoteOrders,
              [],
            ),
            returnValue: _i6
                .Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.OrderEntity>>(
              this,
              Invocation.method(
                #getAllRemoteOrders,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>
      clearRemoteOrders() => (super.noSuchMethod(
            Invocation.method(
              #clearRemoteOrders,
              [],
            ),
            returnValue: _i6
                .Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.OrderEntity>>(
              this,
              Invocation.method(
                #clearRemoteOrders,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.OrderEntity>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> addOrder(
          List<_i8.OrderEntity>? orders) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrder,
          [orders],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addOrder,
            [orders],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> checkout(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkout,
          [status],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #checkout,
            [status],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);
}
